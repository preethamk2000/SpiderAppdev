package com.google.todoapp;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;

public class DBHelper extends SQLiteOpenHelper {

    private static final int DB_VER = 1 ;
    private static final String DB_NAME = "Names";
    public static final String DB_TABLE = "Task";
    public static final String DB_COLUMN = "TaskNames";


    public DBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {
        super(context, DB_NAME, factory, DB_VER);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        String query = "CREATE TABLE "+ DB_TABLE + " ( ID INTEGER PRIMARY KEY AUTOINCREMENT , "+ DB_COLUMN + " TEXT not null );";
        //I gave the not null in lower case just to see the case-insensitiveness of sql
        db.execSQL(query);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS "+ DB_TABLE);
        onCreate(db);
    }

    public void addTask(String task){

        ContentValues cv = new ContentValues();
        cv.put(DB_COLUMN,task);
        SQLiteDatabase db = getWritableDatabase();
        db.insertWithOnConflict(DB_TABLE,null,cv,SQLiteDatabase.CONFLICT_REPLACE);
        db.close();

    }

    public void removeTask(String task){

        SQLiteDatabase db = getWritableDatabase();
        db.execSQL("DELETE FROM " + DB_TABLE + " WHERE " + DB_COLUMN + "=\"" + task + "\";");
        db.close();

    }

    public ArrayList<String> taskList(){

        ArrayList<String> taskNames = new ArrayList<>();
        SQLiteDatabase db = getReadableDatabase();
        Cursor c = db.rawQuery("SELECT * FROM " + DB_TABLE + " WHERE 1 ;" ,null);
        c.moveToFirst();

        while (c.moveToNext()) {
            if (c.getString(c.getColumnIndex(DB_COLUMN)) != null)
                taskNames.add(c.getString(c.getColumnIndex(DB_COLUMN)));
        }
        db.close();
        c.close();

        return taskNames;

    }


}

